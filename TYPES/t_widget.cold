#include "o_objet.h"
#include "u_xt_interface.h"
#include "u_repartiteur.h"
#include "t_geometrie.h"
#include "s_string.h"
#include <ctype.h>

/*
 * Utilitaires
 */

int u_initialiser_iw(Interface_widget *iw
		     , NanoWidget w
		     , void *p
		     , NanoEvent *e)
{
  iw->w     = w ;
  iw->texte = widget_nom(w) ;
  iw->objet = xt_widget_vers_objet(w) ;
  if ( iw->objet == NULL ) return(1) ;
  if ( OBJET_OU_NULL(iw->objet) == NULL ) return(1) ; /* Bug motif */
  iw->ch = (Champ*)p ;

  if ( TRACE2(iw->objet) )
    eprintf("Evenement X11, ch=%s (%s) event=%p\n"
	    ,iw->ch ? iw->ch->nom_champ  : "(null)"
	    ,iw->texte
	    ,e
	    ) ;
  if ( e )
    widget_decode_evenement(e, iw) ;
  return(0) ;
}
/*
 * CALLBACK general
 */

PROTOTYPE_CALLBACK_ACTION(u_callback_bouton, w, p)
{
  Interface_widget iw ;

  if ( u_initialiser_iw(&iw, w, p, NULL) ) return ;

  if ( (*iw.ch->te->entree)(&iw) == 0 )
    {
      OBJET(iw.objet)->urgent = Vrai ;
      evaluation(iw.objet) ;
    }
}

void w_expose(void *o)
{
  Interface_widget *iw = o ;

  if ( OBJET_OU_NULL(iw->objet) && iw->ch->te_ecrit )
    {
      (*iw->ch->te_ecrit)(iw) ;
    }
  free(iw) ;
}

PROTOTYPE_CALLBACK(u_callback_expose, w, p)
{
  Interface_widget *iw ;

  ALLOUER(iw,1) ;
  if ( u_initialiser_iw(iw, w, p, NULL) )
    {
      free(iw) ;
    }
  else
    {
      u_ajoute_action_unique(PRIORITE_EXPOSE, w_expose, iw) ;
    }
}

/*
 * Event Handler
 */

PROTOTYPE_CALLBACK_EVENT(u_ev_motion, w, p, event)
{
  Interface_widget iw ;

  if ( u_initialiser_iw(&iw, w, p, event) ) return ;
  (*iw.ch->te->mouvement)(&iw) ;
  OBJET(iw.objet)->urgent = Vrai ;
  evaluation(iw.objet) ;
  FIN_CALLBACK_EVENT_ARRETE ;
}


PROTOTYPE_CALLBACK_EVENT(u_ev_button_press, w, c, event)
{
  Interface_widget iw ;

  if ( u_initialiser_iw(&iw, w, c, event) ) return ;
  switch( iw.b )
    {
    case 0:
    case 1:
      if ( TRACE(iw.objet) )
	eprintf("u_input bouton 1 ou 2\n") ;
      if ( (*iw.ch->te->entree)(&iw) )
	widget_add_event_motion(w, u_ev_motion, c);
      OBJET(iw.objet)->urgent = Vrai ;
      evaluation(iw.objet) ;
      FIN_CALLBACK_EVENT_ARRETE ;
      break ;
    }
  FIN_CALLBACK_EVENT_CONTINUE ;
}

PROTOTYPE_CALLBACK_EVENT(u_ev_button_release, w, c, event)
{
  Interface_widget iw ;
  if ( u_initialiser_iw(&iw, w, c, event) ) return ;

  switch( iw.b )
    {
    case 0:
    case 1:
      widget_enleve_event_motion(w, u_ev_motion, c) ;
      break ;
    }
  FIN_CALLBACK_EVENT_ARRETE ;
}

/*
 * Format pour un caractère normal : "BC X Y"
 *  B : 0 1:shift 2:ctrl 4:meta
 *  C : le caractère ou le nom de la touche
 *  X Y : Position dans la fenêtre
 * Format pour une touche spéciale : "B N X Y"
 *  N : Nom de la touche
 */
PROTOTYPE_CALLBACK_EVENT(u_ev_key_press, w, c, event)
{
  Interface_widget iw ;
  char historique[30] ;

  if ( u_initialiser_iw(&iw, w, c, event) ) return ;

  historique[0] = '0' + iw.etat ;
  if ( iw.touche[0] == '\0' )
    return ;
  historique[1] = ' ' ;
  historique[2] = '\0' ;
  if ( iw.touche[1] == '\0' )
    historique[1] = iw.touche[0] ;
  else
    strcpy(historique+2, iw.touche) ; 

  sprintf( historique+strlen(historique), " %d %d", iw.x, iw.y) ;

  iw.texte = historique ;
  (*iw.ch->te->clavier)(&iw) ;
  OBJET(iw.objet)->urgent = Vrai ;
  evaluation(iw.objet) ;

  FIN_CALLBACK_EVENT_CONTINUE ;  
}



/*
 ******************************************************************************
 * EDITEUR TEXTE
 ******************************************************************************
 */

static NanoWidget Texte_creer(const Interface_widget *iw)
{
  return(widget_texte(iw->w, iw->ch->nom_champ, EDITE(iw->ch))) ;
}

static NanoWidget Long_texte_creer(const Interface_widget *iw)
{
  return(widget_texte_long(iw->w, iw->ch->nom_champ, EDITE(iw->ch))) ;
}


static const char *Texte_lit(const Interface_widget *iw)
{
  return(widget_texte_lit(iw->w)) ;
}

static void Texte_ecrit(const Interface_widget *iw)
{
  widget_texte_ecrit(iw->w, iw->texte) ;
}

DEFINITION_TYPE_EDITEUR(E_texte, E_void,
			"Éditeur de texte",
			{
			  FONCTION_EDITEUR(te->creer, Texte_creer) ;
			  FONCTION_EDITEUR(te->lit  , Texte_lit  ) ;
			  FONCTION_EDITEUR(te->ecrit, Texte_ecrit) ;
			}
			)

DEFINITION_TYPE_EDITEUR(E_long_texte, E_texte,
			"Éditeur de texte avec ascenseur",
			{
			  FONCTION_EDITEUR(te->creer, Long_texte_creer) ;
			}
			)

/*
 ******************************************************************************
 * BASCULE BOOLEENNE
 ******************************************************************************
 */

static NanoWidget Booleen_creer(const Interface_widget *iw)
{
  return( widget_toggle(iw->w, iw->ch->nom_champ, iw->ch->label) ) ;
}

static const char *Booleen_lit(const Interface_widget *iw)
{
  return( widget_toggle_lit(iw->w) ? "1" : "0" ) ;
}

static void Booleen_ecrit(const Interface_widget *iw)
{
  widget_toggle_ecrit(iw->w, iw->texte[0]=='0' ? 0 : 1) ;
}

DEFINITION_TYPE_EDITEUR(E_booleen, E_void,
			"Bascule booléenne",
			{
			  FONCTION_EDITEUR(te->creer, Booleen_creer) ;
			  FONCTION_EDITEUR(te->lit  , Booleen_lit  ) ;
			  FONCTION_EDITEUR(te->ecrit, Booleen_ecrit) ;
			  c->options &= ~O_Label ;
			  c->options |= O_Edite ;
			}
			)

/*
 ******************************************************************************
 * GEOMETRIE
 ******************************************************************************
 */

static NanoWidget Geometrie_creer(const Interface_widget *iw)
{
  return( widget_label(iw->w, iw->ch->nom_champ, "") ) ;
}

static const char *Geometrie_lit(const Interface_widget *iw)
{
  NanoWidget w ;
  static Chaine s ;
  int l, h, x, y ;

  w = xt_shell(iw->w) ;
  widget_get_size(w, &l, &h) ;
  widget_get_position(w, &x, &y) ;  

  s_efface(&s) ;
  s_printf(&s, "%d %d %d %d", x, y, l, h) ;
  return( s_char(&s) ) ;

}

static void Geometrie_ecrit(const Interface_widget *iw)
{
  Quadruplet q ;
  NanoWidget w ;
  int x, y, l, h ;

  if ( iw->texte[0] )
    {
      codec_sauve_texte(codec_quadruplet, &q, iw->texte) ;
      w = xt_shell(iw->w) ;
      widget_get_size(w, &l, &h) ;
      widget_get_position(w, &x, &y) ;  
      if ( (int)q.x != x || (int)q.y != y )
	widget_positionne(w, q.x, q.y) ;
      if ( (int)q.z != l || (int)q.h != h )
	widget_resize(w, (int)q.z, (int)q.h) ;
    }
}

DEFINITION_TYPE_EDITEUR(E_geometrie, E_void,
			"Position et taille de la fenêtre",
			{
			  FONCTION_EDITEUR(te->creer, Geometrie_creer) ;
			  FONCTION_EDITEUR(te->lit  , Geometrie_lit  ) ;
			  FONCTION_EDITEUR(te->ecrit, Geometrie_ecrit) ;
			  c->options &= ~O_Label ;
			  c->options |=  O_Affiche ;
			}
			)

/*
 ******************************************************************************
 * TITRE
 ******************************************************************************
 */

static NanoWidget Titre_creer(const Interface_widget *iw)
{
  return( widget_label(iw->w, iw->ch->nom_champ, "") ) ;
}

static const char *Titre_lit(const Interface_widget *iw)
{
  return( widget_get_title(xt_shell(iw->w)) ) ;
}

static void Titre_ecrit(const Interface_widget *iw)
{
  widget_set_title(xt_shell(iw->w), iw->texte) ;
}

DEFINITION_TYPE_EDITEUR(E_titre, E_void,
			"Titre de la fenêtre",
			{
			  FONCTION_EDITEUR(te->creer, Titre_creer) ;
			  FONCTION_EDITEUR(te->lit  , Titre_lit  ) ;
			  FONCTION_EDITEUR(te->ecrit, Titre_ecrit) ;
			  c->options &= ~(O_Label|O_Affiche|O_Edite) ;
			  c->options |= O_Cree ;
			}
			)

/*
 ******************************************************************************
 * FONCTION
 ******************************************************************************
 */

static NanoWidget Bouton_creer(const Interface_widget *iw)
{
  NanoWidget w ;
  w = widget_button(iw->w, iw->ch->nom_champ, iw->ch->label) ;
  widget_add_event_activate(w, u_callback_bouton, iw->ch) ;
  return(w) ;
}

DEFINITION_TYPE_EDITEUR(E_bouton, E_void,
			"bouton déclenchant une exécution immédiate",
			{
			  FONCTION_EDITEUR(te->creer, Bouton_creer) ;
			  c->options &= ~(O_Label|O_Sauve|O_Initialiser) ;
			  c->options |= O_Edite ;
			}
			)

/*
 ******************************************************************************
 * MENU
 ******************************************************************************
 */

/*
 * Le bouton à l'intérieur d'un menu contient :
 *   - L'objet en remontant dans les parents
 *   - Les informations sur la fenetre menu (struct fenetre_menu)
 *   - Le label du bouton qui donne le sous-menu sélectionné
 */

static char **description_menu(const char *debut, void *o, const Champ *c)
{
  const char *d, *f, *slash ;
  char *add ;
  char **t ;
  int len ;
  int i, j, k ,nb, nb_tab ;
  int *tabulation ;
  static Chaine s ;

  d = NULL ;
  if ( T(Menu, o, c).description )
    if ( T(Menu, o, c).description[0] )
      d = T(Menu, o, c).description ;

  if ( d == NULL )
    d = c->te_texte ;

  len = strlen(debut) ;
  t = NULL ;
  nb = 0 ;
  while(*d)
    {
      f = strchr(d, '\n') ;
      if ( f==NULL )
	f = d + strlen(d) ;
      if ( strncmp(d, debut, len)==0 )
	{
	  slash = strchr(d+len, '/') ;
	  if ( slash==NULL || slash > f )
	    {
	      /*
	       * C'est un feuille de menu
	       */
	      ALLOUER(add, f-(d+len)+1) ;
	      strncpy(add, d+len, f-(d+len)) ;
	      add[f-(d+len)] = '\0' ;
	    }
	  else
	    {
	      /*
	       * C'est un noeud du menu
	       */
	      ALLOUER(add, slash-d+2 ) ;
	      strncpy(add, d, slash-d+1) ;
	      add[slash-d+1] = '\0' ;
	      for(i=0;i<nb;i++)
		if ( strcmp(t[i], add) == 0 )
		  {
		    free(add) ;
		    add = NULL ;
		    break ;
		  }
	    }
	  if (add)
	    {
	      REALLOUER(t, nb+1) ;
	      t[nb] = add ;
	      nb++ ;
	    } 
	}
      if ( *f=='\0' )
	break ;
      d = f + 1 ;
    }
  REALLOUER(t, nb+1) ;
  t[nb] = NULL ; 

  /*
   * Tabulations
   */

  nb_tab = 0 ;
  for(i=0;i<nb;i++)
    {
      j = 0 ;
      for(d=t[i]; *d; d++)
	if ( *d == '\t' )
	  j++ ;
      if ( j > nb_tab )
	nb_tab = j ;
    }
  nb_tab++ ;
  ALLOUER(tabulation, nb_tab) ;
  for(i=0;i<nb_tab;i++)
    tabulation[i] = 0 ;

  for(i=0;i<nb;i++)
    {
      j = 0 ;
      k = 0 ;
      for(d=t[i]; *d; d++)
	{
	  if ( *d == '\t' )
	    {
	      if ( j > tabulation[k] )
		tabulation[k] = j ;
	      j = 0 ;
	      k++ ;
	    }
	  else
	    j++ ;
	}
      if ( j > tabulation[k] )
	tabulation[k] = j ;
    }

  for(i=0;i<nb;i++)
    {
      s_efface(&s) ;
      k = 0 ;
      for(add=t[i], f=add; *add; add++)
	{
	  if ( *add == '\t' )
	    {
	      *add = '\0' ;
	      s_printf(&s, "%-*s", tabulation[k], f) ;
	      f = add+1 ;
	      k++ ;
	    }
	}
      s_printf(&s, "%s", f) ;

      reaffecte_chaine_avec_copie(&t[i], s_char(&s)) ;
    }
  free(tabulation) ;

     
  return(t) ;
}

static PROTOTYPE_CALLBACK_ACTION(action_bouton_menu, w, ch)
{
  struct fenetre_menu *fmr ;
  Interface_widget iw ;

  fmr = (struct fenetre_menu*) ch ;

  c_sauve_ici(fmr->objet, fmr->ch, widget_nom(w)) ;
  if ( fmr->ch->te_entree )
    {
      iw.objet = fmr->objet ;
      iw.ch = fmr->ch ;
      iw.texte = widget_nom(w) ;
      (*fmr->ch->te_entree)(&iw) ;
    }
}


static PROTOTYPE_CALLBACK_ACTION(u_affiche_sous_menu, w, ch) ;

void remplire_menu(struct fenetre_menu *fm)
{
  char **t ;
  int i, fin, milieu ;
  Booleen actif ;
  Liste *a_manager ;
  NanoWidget w, pd ;

  t = description_menu(fm->chemin, fm->objet, fm->ch) ;
  a_manager = NULL ;
  for(i=0;t[i];i++)
    {
      fin = strlen(t[i]) - 1 ;
      if ( t[i][fin] == '/' )
	{
	  milieu = fin - 1 ;
	  for( milieu = fin - 1 ; milieu>=0 ; milieu-- )
	    if ( t[i][milieu]=='/' )
	      break ;
	  w = widget_bouton_cascade(fm->widget, t[i], &t[i][milieu+1]) ;
	  pd = widget_pulldown_menu(xt_sommet(w)) ;
	  widget_attache_sous_menu(w, pd) ;
	  widget_add_event_activate_cascade(w, u_affiche_sous_menu, fm) ;
	}
      else
	{
	  if ( t[i][fin] == '@' )
	    {
	      actif = Faux ;
	      t[i][fin--] = '\0' ;
	    }
	  else
	    actif = Vrai ;
	  milieu = fin - 1 ;
	  for( milieu = fin - 1 ; milieu>=0 ; milieu-- )
	    if ( t[i][milieu]=='\001' )
	      {
		t[i][milieu] = '\0' ;
		break ;
	      }
		
	  w = widget_button(fm->widget, t[i]+milieu+1, t[i]) ;
	  if ( actif )
	    {
	      widget_add_event_activate(w, action_bouton_menu, (Champ *)fm) ;
	    }
	  else
	    {
	      widget_sensible(w, actif) ;
	    }
	}
      l_ajoute(&a_manager, w) ;
      free(t[i]) ;
    }
  free(t) ;
  widget_termine_menu(fm->widget, a_manager) ;
  w_manage_widgets(&a_manager) ;
}

void vide_menu(Menu *m, struct fenetre_menu *fm)
{
  Liste *f ;
  NanoWidget menu_attache ;
  Booleen premier, trouve ;

  f = widget_fils(fm->widget) ;
  premier = Vrai ;
  eprintf("fm = %p\n", fm) ;
  POUR(NanoWidget, fils, f,
       {
	 if ( premier )
	   {
	     premier = Faux ;
	     continue ;
	   }
	 menu_attache = widget_menu_attache(fils) ;
	 eprintf("fm = %p ff = %p menu = %p\n", fm, fils, menu_attache) ;
	 if ( menu_attache )
	   {
	     trouve = Faux ;
	     POUR(struct fenetre_menu *, fff, m->visibles,
		  if ( fff && fff->widget == menu_attache)
		     trouve = Vrai ;
		  ) ;
	     if ( !trouve )
	       widget_detruit(menu_attache) ;
	   }
	 widget_detruit(fils) ;
       }) ;
  l_detruit(&f) ;
}

void detruit_les_non_visible(Menu *m)
{
  POUR(struct fenetre_menu *, fm, m->visibles,
       if ( !widget_visible(fm->widget) )
       {
	 vide_menu(m, fm) ;
	 widget_detruit_menu(fm->widget) ;
	 free(fm) ;
	 l_remplace(m->visibles, fm, NULL) ;
       }
       ) ;
  l_enleve(&m->visibles, NULL) ;
}

void mise_a_jour_menus(Menu *m)
{
  detruit_les_non_visible(m) ;

  POUR(struct fenetre_menu *, fm, m->visibles,
       widget_congele(fm->widget) ;
       vide_menu(m, fm) ;
       remplire_menu(fm) ;
       widget_degele(fm->widget) ;
       ) ;
}

static PROTOTYPE_CALLBACK_ACTION(u_affiche_sous_menu, w, ch)
{
  struct fenetre_menu *fmr, *fm ;

  fmr = (struct fenetre_menu*) ch ;
  ALLOUER(fm,1) ;
  fm->chemin = strdup(widget_nom(w)) ;
  fm->index = 0 ;
  fm->ch = fmr->ch ;
  fm->objet = fmr->objet ;
  fm->widget = widget_menu_attache(w) ;
  remplire_menu(fm) ;

  l_ajoute(&T(Menu, fmr->objet, fmr->ch).visibles, fm) ;
  widget_attache_sous_menu(w, fm->widget) ;
  widget_enleve_event_activate_cascade(w, u_affiche_sous_menu, ch) ;
}

static PROTOTYPE_CALLBACK_EVENT(u_affiche_menu, w, ch, event)
{
  Interface_widget iw ;
  Menu *m ;
  struct fenetre_menu* fm ;

  if ( u_initialiser_iw(&iw, w, ch, event) ) return ;

  m = &T(Menu, iw.objet, iw.ch) ;

  ALLOUER(fm,1) ;
  fm->chemin = strdup("") ;
  fm->index = 0 ;
  fm->ch = iw.ch ;
  fm->objet = iw.objet ;
  fm->widget = widget_popup_menu(xt_sommet(w)) ;
  remplire_menu(fm) ;

  l_ajoute(&m->visibles, fm) ;
  widget_positionne_menu(fm->widget, event) ;
  widget_manage_freres(&fm->widget, 1) ;
  FIN_CALLBACK_EVENT_CONTINUE ;
}













static Booleen option_menu_entree(const Interface_widget *iw)
{
  Interface_widget iw_racine ;

  iw_racine       = *iw                                                  ;
  iw_racine.w     = widget_trouve_fils(OBJET(iw->objet)->edite, iw->ch->nom_champ) ;
  iw_racine.texte = widget_nom(iw->w)                                        ;
  (*iw->ch->te->ecrit)(&iw_racine) ; 

  return(1) ;
}


static void commande_menu_ecrit(const Interface_widget* iw)
{
  mise_a_jour_menus( &T(Menu, iw->objet, iw->ch) ) ;
}

static NanoWidget Menu_creer(const Interface_widget* iw)
{
  NanoWidget bouton ;

  bouton = widget_button(iw->w, iw->ch->nom_champ, iw->ch->label) ;
  widget_add_event_button_press(bouton, u_affiche_menu, iw->ch) ;
  return(bouton) ;
}

static void Option_menu_ecrit(const Interface_widget* iw)
{
  widget_button_ecrit(iw->w, iw->texte) ;
}

static const char* Option_menu_lit(const Interface_widget* iw)
{
  return(widget_button_lit(iw->w)) ;
}

static Booleen commande_menu_entree(const Interface_widget *iw)
{
  return(0) ;
}

DEFINITION_TYPE_EDITEUR(E_commande_menu, E_void,
			"Menu d'exécution",
			{
                          FONCTION_EDITEUR(te->creer  , Menu_creer          ) ;
                          FONCTION_EDITEUR(te->entree , commande_menu_entree) ;
			  FONCTION_EDITEUR(te->ecrit  , commande_menu_ecrit ) ;
			  FONCTION_EDITEUR(te->lit    , Jamais_pareil_lit) ;
			  
			  c->options &= ~(O_Label|O_Sauve|
					 O_Edite|O_Initialiser) ;
			  c->options |= O_Affiche ;
			}
			)

DEFINITION_TYPE_EDITEUR(E_option_menu, E_void,
			"Menu à choix multiple",
			{
			  FONCTION_EDITEUR(te->creer       , Menu_creer) ;
			  FONCTION_EDITEUR(te->lit         , Option_menu_lit) ;
			  FONCTION_EDITEUR(te->ecrit     , Option_menu_ecrit) ;
			  FONCTION_EDITEUR(te->entree   , option_menu_entree) ;
			}
			)


/*
 ******************************************************************************
 * DRAWING AREA
 ******************************************************************************
 */

NanoWidget Drawing_creer(const Interface_widget *iw)
{
  NanoWidget d, sw ;

  sw = widget_drawing(iw->w, iw->ch->nom_champ, &d) ;
  widget_add_event_expose         (d, u_callback_expose  , iw->ch) ;
  widget_add_event_button_press   (d, u_ev_button_press  , iw->ch) ;
  widget_add_event_button_release (d, u_ev_button_release, iw->ch) ;
  widget_add_event_key_press      (d, u_ev_key_press     , iw->ch) ;
  return(sw) ;
}

DEFINITION_TYPE_EDITEUR(E_drawing, E_void,
			"Zone d'affichage indifférenciée",
			{
                          FONCTION_EDITEUR(te->creer ,Drawing_creer    ) ;
                          FONCTION_EDITEUR(te->lit   ,Jamais_pareil_lit) ;
			  
			  c->options &= ~(O_Label | O_Sauve | O_Edite) ;
			  c->options |=  O_Cree | O_Affiche ;
			}
			)

/*
*******************************************************************************
*******************************************************************************
*******************************************************************************
 */



DEFINITION_TYPE_EDITEUR
(E_graphe_modele, E_drawing,
 "Graphe du modèle NanoÉdit",
 FONCTION_EDITEUR(te->start_classe, widget_Graphe_start) ;
 FONCTION_EDITEUR(te->stop_classe , widget_Graphe_stop ) ;
 FONCTION_EDITEUR(te->lit         , Jamais_pareil_lit) ;
 FONCTION_EDITEUR(te->entree      , widget_Graphe_entree) ;
 /* FONCTION_EDITEUR(te->ecrit       , Graphe_trace) ; */
 )

/*
 *
 */

static void ascenseur_sb_ecrit(const Interface_widget *iw)
{
  float v, min, max ;

  min = 0 ;
  max = 1 ;
  sscanf(iw->texte, "%g%g%g", &v, &min, &max) ;
  if ( max <= min )
    {
      max = min + 1 ;      
    }

  widget_scrollbar_ecrit(widget_trouve_fils(iw->w, "sb"), min, max, v) ;
}

static void ascenseur_te_ecrit(const Interface_widget *iw)
{
  widget_label_ecrit(widget_trouve_fils(iw->w, "te"), iw->texte) ;
}

static const char* ascenseur_lit(const Interface_widget *iw)
{
  return( widget_texte_lit(widget_trouve_fils(iw->w, "te")) ) ;
}

static void ascenseur_ecrit(const Interface_widget *iw)
{
  if ( strcmp(ascenseur_lit(iw),iw->texte) )
    {
      ascenseur_sb_ecrit(iw) ;
      ascenseur_te_ecrit(iw) ;
    }
}

PROTOTYPE_CALLBACK_ACTION(u_ascenseur_callback, w, p)
{
  Interface_widget iw ;
  static char buf[100] ;
  float min ,max, v ;


  if ( u_initialiser_iw(&iw, w, p, NULL) ) return ;

  widget_scrollbar_infos(w, &min, &max, &v) ;
  sprintf(buf, "%g %g %g", v, min, max) ;

  iw.w = widget_parent(iw.w) ;
  iw.texte = buf ;
  ascenseur_te_ecrit(&iw) ;
  c_sauve_ici(iw.objet, iw.ch, buf ) ;
  OBJET(iw.objet)->urgent = Vrai ;
  evaluation(iw.objet) ;
}

PROTOTYPE_CALLBACK_ACTION(u_texte_ascenseur_callback, w, p)
{
  Interface_widget iw ;

  if ( u_initialiser_iw(&iw, w, p, NULL) ) return ;
  iw.texte = widget_texte_lit(w) ;
  iw.w = widget_parent(iw.w) ;
  ascenseur_sb_ecrit(&iw) ;
}


static NanoWidget ascenseur_creer(const Interface_widget *iw)
{
  NanoWidget w, t, b ;
  Liste *a_manager ;

  a_manager = NULL ;
  b = widget_horizontal_ou_vertical(iw->w, iw->ch->nom_champ, 1, 0) ;

  t = widget_texte(b, "te", 1) ;
  l_ajoute_fin(&a_manager, t) ;

  w = widget_hscrollbar(b, "sb") ;
  l_ajoute_fin(&a_manager, w) ;

  widget_termine_boite(b, 0, 0, a_manager) ;
  w_manage_widgets(&a_manager) ;

  widget_add_event_texte(t, u_texte_ascenseur_callback, iw->ch) ;
  widget_add_event_scrollbar(w, u_ascenseur_callback, iw->ch) ;
  return(b) ;
}

DEFINITION_TYPE_EDITEUR(E_ascenseur, E_void,
			"Ascenseur à effet immédiat",
			{
			  FONCTION_EDITEUR(te->creer, ascenseur_creer) ;
			  FONCTION_EDITEUR(te->lit, ascenseur_lit) ;
			  FONCTION_EDITEUR(te->ecrit, ascenseur_ecrit) ;
			  c->defaut = "0.5 0 1" ;
			}
			)
